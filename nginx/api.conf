# It defines how NGINX handles incoming traffic and routes it to the correct backend services (only).

events {
    # The 'worker_connections' directive sets the maximum number of simultaneous connections that can be opened by a worker process.
    # The default is 1024. This value is usually tuned based on the server's capacity and expected load.
    worker_connections 1024;
}

http {
    # The upstream blocks define groups of backend servers.
    # NGINX will use these groups for load balancing and proxying.

    # This upstream block defines a group for the subscription microservice.
    upstream subscription_service {
        server localhost:1001;
    }

    # This upstream block defines a group for the HTTP api of user microservice.
    upstream user_service {
        server localhost:1000;
    }

    # This upstream block is for a gRPC api of user microservice.
    upstream user_grpc_service {
        server localhost:2000;
    }

    # This upstream block is for a LLM microservice.
    upstream llm_grpc_service {
        server localhost:2001;
    }

    server {
        listen 80;

        server_name localhost;

        # The 'proxy_intercept_errors' directive turns on the interception of errors from proxied servers.
        proxy_intercept_errors on;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # These headers are for configuring Cross-Origin Resource Sharing (CORS).
        add_header Access-Control-Allow-Headers "DNT,X-Csrf-Token,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Cookie" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Origin  "http://localhost:5173" always;
        add_header Access-Control-Allow-Credentials  "true" always;

        # If the request method is OPTIONS, it returns a 204 No Content response and the headers,
        # which signals to the browser that the CORS policy is acceptable.
        if ($request_method = OPTIONS) {
          return 204;
        }

        location /v1/subscription {
            proxy_pass http://subscription_service;
        }

        location /v1/users {
            proxy_pass http://user_service;
        }

        location /v1/sessions {
            proxy_pass http://user_service;
        }

        location /v1/password {
            proxy_pass http://user_service;
        }

        location /v1/session {
            proxy_pass http://user_service;
        }

        location /v1/account {
            proxy_pass http://user_service;
        }

        location /user_service.v1.UserService/GetAccount {
            grpc_pass grpc://user_grpc_service;
        }

        location /llm_service.v1.LLMService/GenerateResponse {
            grpc_pass grpc://llm_grpc_service;
        }

        location / {
            return 404 "Not Found";
        }
    }
}
