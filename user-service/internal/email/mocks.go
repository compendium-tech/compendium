// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package email

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessageBuilder creates a new instance of MockMessageBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageBuilder {
	mock := &MockMessageBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageBuilder is an autogenerated mock type for the MessageBuilder type
type MockMessageBuilder struct {
	mock.Mock
}

type MockMessageBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageBuilder) EXPECT() *MockMessageBuilder_Expecter {
	return &MockMessageBuilder_Expecter{mock: &_m.Mock}
}

// PasswordResetEmail provides a mock function for the type MockMessageBuilder
func (_mock *MockMessageBuilder) PasswordResetEmail(to string, otp string) Message {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetEmail")
	}

	var r0 Message
	if returnFunc, ok := ret.Get(0).(func(string, string) Message); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Get(0).(Message)
	}
	return r0
}

// MockMessageBuilder_PasswordResetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordResetEmail'
type MockMessageBuilder_PasswordResetEmail_Call struct {
	*mock.Call
}

// PasswordResetEmail is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockMessageBuilder_Expecter) PasswordResetEmail(to interface{}, otp interface{}) *MockMessageBuilder_PasswordResetEmail_Call {
	return &MockMessageBuilder_PasswordResetEmail_Call{Call: _e.mock.On("PasswordResetEmail", to, otp)}
}

func (_c *MockMessageBuilder_PasswordResetEmail_Call) Run(run func(to string, otp string)) *MockMessageBuilder_PasswordResetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMessageBuilder_PasswordResetEmail_Call) Return(message Message) *MockMessageBuilder_PasswordResetEmail_Call {
	_c.Call.Return(message)
	return _c
}

func (_c *MockMessageBuilder_PasswordResetEmail_Call) RunAndReturn(run func(to string, otp string) Message) *MockMessageBuilder_PasswordResetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SignInEmail provides a mock function for the type MockMessageBuilder
func (_mock *MockMessageBuilder) SignInEmail(to string, otp string) Message {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for SignInEmail")
	}

	var r0 Message
	if returnFunc, ok := ret.Get(0).(func(string, string) Message); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Get(0).(Message)
	}
	return r0
}

// MockMessageBuilder_SignInEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignInEmail'
type MockMessageBuilder_SignInEmail_Call struct {
	*mock.Call
}

// SignInEmail is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockMessageBuilder_Expecter) SignInEmail(to interface{}, otp interface{}) *MockMessageBuilder_SignInEmail_Call {
	return &MockMessageBuilder_SignInEmail_Call{Call: _e.mock.On("SignInEmail", to, otp)}
}

func (_c *MockMessageBuilder_SignInEmail_Call) Run(run func(to string, otp string)) *MockMessageBuilder_SignInEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMessageBuilder_SignInEmail_Call) Return(message Message) *MockMessageBuilder_SignInEmail_Call {
	_c.Call.Return(message)
	return _c
}

func (_c *MockMessageBuilder_SignInEmail_Call) RunAndReturn(run func(to string, otp string) Message) *MockMessageBuilder_SignInEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SignUpEmail provides a mock function for the type MockMessageBuilder
func (_mock *MockMessageBuilder) SignUpEmail(to string, otp string) Message {
	ret := _mock.Called(to, otp)

	if len(ret) == 0 {
		panic("no return value specified for SignUpEmail")
	}

	var r0 Message
	if returnFunc, ok := ret.Get(0).(func(string, string) Message); ok {
		r0 = returnFunc(to, otp)
	} else {
		r0 = ret.Get(0).(Message)
	}
	return r0
}

// MockMessageBuilder_SignUpEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUpEmail'
type MockMessageBuilder_SignUpEmail_Call struct {
	*mock.Call
}

// SignUpEmail is a helper method to define mock.On call
//   - to string
//   - otp string
func (_e *MockMessageBuilder_Expecter) SignUpEmail(to interface{}, otp interface{}) *MockMessageBuilder_SignUpEmail_Call {
	return &MockMessageBuilder_SignUpEmail_Call{Call: _e.mock.On("SignUpEmail", to, otp)}
}

func (_c *MockMessageBuilder_SignUpEmail_Call) Run(run func(to string, otp string)) *MockMessageBuilder_SignUpEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMessageBuilder_SignUpEmail_Call) Return(message Message) *MockMessageBuilder_SignUpEmail_Call {
	_c.Call.Return(message)
	return _c
}

func (_c *MockMessageBuilder_SignUpEmail_Call) RunAndReturn(run func(to string, otp string) Message) *MockMessageBuilder_SignUpEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSender creates a new instance of MockSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSender {
	mock := &MockSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSender is an autogenerated mock type for the Sender type
type MockSender struct {
	mock.Mock
}

type MockSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSender) EXPECT() *MockSender_Expecter {
	return &MockSender_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function for the type MockSender
func (_mock *MockSender) SendMessage(msg Message) {
	_mock.Called(msg)
	return
}

// MockSender_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockSender_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - msg Message
func (_e *MockSender_Expecter) SendMessage(msg interface{}) *MockSender_SendMessage_Call {
	return &MockSender_SendMessage_Call{Call: _e.mock.On("SendMessage", msg)}
}

func (_c *MockSender_SendMessage_Call) Run(run func(msg Message)) *MockSender_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Message
		if args[0] != nil {
			arg0 = args[0].(Message)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSender_SendMessage_Call) Return() *MockSender_SendMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSender_SendMessage_Call) RunAndReturn(run func(msg Message)) *MockSender_SendMessage_Call {
	_c.Run(run)
	return _c
}
