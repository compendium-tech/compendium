// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package geoip

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockGeoIP creates a new instance of MockGeoIP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGeoIP(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGeoIP {
	mock := &MockGeoIP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGeoIP is an autogenerated mock type for the GeoIP type
type MockGeoIP struct {
	mock.Mock
}

type MockGeoIP_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGeoIP) EXPECT() *MockGeoIP_Expecter {
	return &MockGeoIP_Expecter{mock: &_m.Mock}
}

// GetLocation provides a mock function for the type MockGeoIP
func (_mock *MockGeoIP) GetLocation(ip string) string {
	ret := _mock.Called(ip)

	if len(ret) == 0 {
		panic("no return value specified for GetLocation")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(ip)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockGeoIP_GetLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocation'
type MockGeoIP_GetLocation_Call struct {
	*mock.Call
}

// GetLocation is a helper method to define mock.On call
//   - ip string
func (_e *MockGeoIP_Expecter) GetLocation(ip interface{}) *MockGeoIP_GetLocation_Call {
	return &MockGeoIP_GetLocation_Call{Call: _e.mock.On("GetLocation", ip)}
}

func (_c *MockGeoIP_GetLocation_Call) Run(run func(ip string)) *MockGeoIP_GetLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGeoIP_GetLocation_Call) Return(s string) *MockGeoIP_GetLocation_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockGeoIP_GetLocation_Call) RunAndReturn(run func(ip string) string) *MockGeoIP_GetLocation_Call {
	_c.Call.Return(run)
	return _c
}
