// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/compendium-tech/compendium/user-service/internal/domain"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// FinishPasswordReset provides a mock function for the type MockAuthService
func (_mock *MockAuthService) FinishPasswordReset(ctx context.Context, request domain.FinishPasswordResetRequest) {
	_mock.Called(ctx, request)
	return
}

// MockAuthService_FinishPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishPasswordReset'
type MockAuthService_FinishPasswordReset_Call struct {
	*mock.Call
}

// FinishPasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.FinishPasswordResetRequest
func (_e *MockAuthService_Expecter) FinishPasswordReset(ctx interface{}, request interface{}) *MockAuthService_FinishPasswordReset_Call {
	return &MockAuthService_FinishPasswordReset_Call{Call: _e.mock.On("FinishPasswordReset", ctx, request)}
}

func (_c *MockAuthService_FinishPasswordReset_Call) Run(run func(ctx context.Context, request domain.FinishPasswordResetRequest)) *MockAuthService_FinishPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FinishPasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(domain.FinishPasswordResetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_FinishPasswordReset_Call) Return() *MockAuthService_FinishPasswordReset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthService_FinishPasswordReset_Call) RunAndReturn(run func(ctx context.Context, request domain.FinishPasswordResetRequest)) *MockAuthService_FinishPasswordReset_Call {
	_c.Run(run)
	return _c
}

// GetSessionsForAuthenticatedUser provides a mock function for the type MockAuthService
func (_mock *MockAuthService) GetSessionsForAuthenticatedUser(ctx context.Context, refreshToken string) []domain.Session {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionsForAuthenticatedUser")
	}

	var r0 []domain.Session
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []domain.Session); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Session)
		}
	}
	return r0
}

// MockAuthService_GetSessionsForAuthenticatedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionsForAuthenticatedUser'
type MockAuthService_GetSessionsForAuthenticatedUser_Call struct {
	*mock.Call
}

// GetSessionsForAuthenticatedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockAuthService_Expecter) GetSessionsForAuthenticatedUser(ctx interface{}, refreshToken interface{}) *MockAuthService_GetSessionsForAuthenticatedUser_Call {
	return &MockAuthService_GetSessionsForAuthenticatedUser_Call{Call: _e.mock.On("GetSessionsForAuthenticatedUser", ctx, refreshToken)}
}

func (_c *MockAuthService_GetSessionsForAuthenticatedUser_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_GetSessionsForAuthenticatedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_GetSessionsForAuthenticatedUser_Call) Return(sessions []domain.Session) *MockAuthService_GetSessionsForAuthenticatedUser_Call {
	_c.Call.Return(sessions)
	return _c
}

func (_c *MockAuthService_GetSessionsForAuthenticatedUser_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) []domain.Session) *MockAuthService_GetSessionsForAuthenticatedUser_Call {
	_c.Call.Return(run)
	return _c
}

// InitPasswordReset provides a mock function for the type MockAuthService
func (_mock *MockAuthService) InitPasswordReset(ctx context.Context, request domain.InitPasswordResetRequest) {
	_mock.Called(ctx, request)
	return
}

// MockAuthService_InitPasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitPasswordReset'
type MockAuthService_InitPasswordReset_Call struct {
	*mock.Call
}

// InitPasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.InitPasswordResetRequest
func (_e *MockAuthService_Expecter) InitPasswordReset(ctx interface{}, request interface{}) *MockAuthService_InitPasswordReset_Call {
	return &MockAuthService_InitPasswordReset_Call{Call: _e.mock.On("InitPasswordReset", ctx, request)}
}

func (_c *MockAuthService_InitPasswordReset_Call) Run(run func(ctx context.Context, request domain.InitPasswordResetRequest)) *MockAuthService_InitPasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.InitPasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(domain.InitPasswordResetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_InitPasswordReset_Call) Return() *MockAuthService_InitPasswordReset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthService_InitPasswordReset_Call) RunAndReturn(run func(ctx context.Context, request domain.InitPasswordResetRequest)) *MockAuthService_InitPasswordReset_Call {
	_c.Run(run)
	return _c
}

// Logout provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Logout(ctx context.Context, refreshToken string) {
	_mock.Called(ctx, refreshToken)
	return
}

// MockAuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockAuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *MockAuthService_Expecter) Logout(ctx interface{}, refreshToken interface{}) *MockAuthService_Logout_Call {
	return &MockAuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, refreshToken)}
}

func (_c *MockAuthService_Logout_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_Logout_Call) Return() *MockAuthService_Logout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthService_Logout_Call) RunAndReturn(run func(ctx context.Context, refreshToken string)) *MockAuthService_Logout_Call {
	_c.Run(run)
	return _c
}

// Refresh provides a mock function for the type MockAuthService
func (_mock *MockAuthService) Refresh(ctx context.Context, request domain.RefreshTokenRequest) domain.SessionResponse {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 domain.SessionResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.RefreshTokenRequest) domain.SessionResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.SessionResponse)
	}
	return r0
}

// MockAuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.RefreshTokenRequest
func (_e *MockAuthService_Expecter) Refresh(ctx interface{}, request interface{}) *MockAuthService_Refresh_Call {
	return &MockAuthService_Refresh_Call{Call: _e.mock.On("Refresh", ctx, request)}
}

func (_c *MockAuthService_Refresh_Call) Run(run func(ctx context.Context, request domain.RefreshTokenRequest)) *MockAuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.RefreshTokenRequest
		if args[1] != nil {
			arg1 = args[1].(domain.RefreshTokenRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_Refresh_Call) Return(sessionResponse domain.SessionResponse) *MockAuthService_Refresh_Call {
	_c.Call.Return(sessionResponse)
	return _c
}

func (_c *MockAuthService_Refresh_Call) RunAndReturn(run func(ctx context.Context, request domain.RefreshTokenRequest) domain.SessionResponse) *MockAuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSessionByID provides a mock function for the type MockAuthService
func (_mock *MockAuthService) RemoveSessionByID(ctx context.Context, sessionID uuid.UUID, refreshToken string) {
	_mock.Called(ctx, sessionID, refreshToken)
	return
}

// MockAuthService_RemoveSessionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSessionByID'
type MockAuthService_RemoveSessionByID_Call struct {
	*mock.Call
}

// RemoveSessionByID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID uuid.UUID
//   - refreshToken string
func (_e *MockAuthService_Expecter) RemoveSessionByID(ctx interface{}, sessionID interface{}, refreshToken interface{}) *MockAuthService_RemoveSessionByID_Call {
	return &MockAuthService_RemoveSessionByID_Call{Call: _e.mock.On("RemoveSessionByID", ctx, sessionID, refreshToken)}
}

func (_c *MockAuthService_RemoveSessionByID_Call) Run(run func(ctx context.Context, sessionID uuid.UUID, refreshToken string)) *MockAuthService_RemoveSessionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthService_RemoveSessionByID_Call) Return() *MockAuthService_RemoveSessionByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthService_RemoveSessionByID_Call) RunAndReturn(run func(ctx context.Context, sessionID uuid.UUID, refreshToken string)) *MockAuthService_RemoveSessionByID_Call {
	_c.Run(run)
	return _c
}

// SignIn provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SignIn(ctx context.Context, request domain.SignInRequest) domain.SignInResponse {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 domain.SignInResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SignInRequest) domain.SignInResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.SignInResponse)
	}
	return r0
}

// MockAuthService_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type MockAuthService_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.SignInRequest
func (_e *MockAuthService_Expecter) SignIn(ctx interface{}, request interface{}) *MockAuthService_SignIn_Call {
	return &MockAuthService_SignIn_Call{Call: _e.mock.On("SignIn", ctx, request)}
}

func (_c *MockAuthService_SignIn_Call) Run(run func(ctx context.Context, request domain.SignInRequest)) *MockAuthService_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SignInRequest
		if args[1] != nil {
			arg1 = args[1].(domain.SignInRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_SignIn_Call) Return(signInResponse domain.SignInResponse) *MockAuthService_SignIn_Call {
	_c.Call.Return(signInResponse)
	return _c
}

func (_c *MockAuthService_SignIn_Call) RunAndReturn(run func(ctx context.Context, request domain.SignInRequest) domain.SignInResponse) *MockAuthService_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SignUp(ctx context.Context, request domain.SignUpRequest) {
	_mock.Called(ctx, request)
	return
}

// MockAuthService_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockAuthService_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.SignUpRequest
func (_e *MockAuthService_Expecter) SignUp(ctx interface{}, request interface{}) *MockAuthService_SignUp_Call {
	return &MockAuthService_SignUp_Call{Call: _e.mock.On("SignUp", ctx, request)}
}

func (_c *MockAuthService_SignUp_Call) Run(run func(ctx context.Context, request domain.SignUpRequest)) *MockAuthService_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SignUpRequest
		if args[1] != nil {
			arg1 = args[1].(domain.SignUpRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_SignUp_Call) Return() *MockAuthService_SignUp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthService_SignUp_Call) RunAndReturn(run func(ctx context.Context, request domain.SignUpRequest)) *MockAuthService_SignUp_Call {
	_c.Run(run)
	return _c
}

// SubmitMfaOtp provides a mock function for the type MockAuthService
func (_mock *MockAuthService) SubmitMfaOtp(ctx context.Context, request domain.SubmitMfaOtpRequest) domain.SessionResponse {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for SubmitMfaOtp")
	}

	var r0 domain.SessionResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SubmitMfaOtpRequest) domain.SessionResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.SessionResponse)
	}
	return r0
}

// MockAuthService_SubmitMfaOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitMfaOtp'
type MockAuthService_SubmitMfaOtp_Call struct {
	*mock.Call
}

// SubmitMfaOtp is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.SubmitMfaOtpRequest
func (_e *MockAuthService_Expecter) SubmitMfaOtp(ctx interface{}, request interface{}) *MockAuthService_SubmitMfaOtp_Call {
	return &MockAuthService_SubmitMfaOtp_Call{Call: _e.mock.On("SubmitMfaOtp", ctx, request)}
}

func (_c *MockAuthService_SubmitMfaOtp_Call) Run(run func(ctx context.Context, request domain.SubmitMfaOtpRequest)) *MockAuthService_SubmitMfaOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SubmitMfaOtpRequest
		if args[1] != nil {
			arg1 = args[1].(domain.SubmitMfaOtpRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthService_SubmitMfaOtp_Call) Return(sessionResponse domain.SessionResponse) *MockAuthService_SubmitMfaOtp_Call {
	_c.Call.Return(sessionResponse)
	return _c
}

func (_c *MockAuthService_SubmitMfaOtp_Call) RunAndReturn(run func(ctx context.Context, request domain.SubmitMfaOtpRequest) domain.SessionResponse) *MockAuthService_SubmitMfaOtp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// FindAccountByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) FindAccountByEmail(ctx context.Context, email string) domain.AccountResponse {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindAccountByEmail")
	}

	var r0 domain.AccountResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.AccountResponse); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.AccountResponse)
	}
	return r0
}

// MockUserService_FindAccountByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAccountByEmail'
type MockUserService_FindAccountByEmail_Call struct {
	*mock.Call
}

// FindAccountByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserService_Expecter) FindAccountByEmail(ctx interface{}, email interface{}) *MockUserService_FindAccountByEmail_Call {
	return &MockUserService_FindAccountByEmail_Call{Call: _e.mock.On("FindAccountByEmail", ctx, email)}
}

func (_c *MockUserService_FindAccountByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_FindAccountByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_FindAccountByEmail_Call) Return(accountResponse domain.AccountResponse) *MockUserService_FindAccountByEmail_Call {
	_c.Call.Return(accountResponse)
	return _c
}

func (_c *MockUserService_FindAccountByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) domain.AccountResponse) *MockUserService_FindAccountByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAccount(ctx context.Context, id uuid.UUID) domain.AccountResponse {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 domain.AccountResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.AccountResponse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.AccountResponse)
	}
	return r0
}

// MockUserService_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockUserService_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUserService_Expecter) GetAccount(ctx interface{}, id interface{}) *MockUserService_GetAccount_Call {
	return &MockUserService_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *MockUserService_GetAccount_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserService_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_GetAccount_Call) Return(accountResponse domain.AccountResponse) *MockUserService_GetAccount_Call {
	_c.Call.Return(accountResponse)
	return _c
}

func (_c *MockUserService_GetAccount_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) domain.AccountResponse) *MockUserService_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountAsAuthenticatedUser provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAccountAsAuthenticatedUser(ctx context.Context) domain.AccountResponse {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountAsAuthenticatedUser")
	}

	var r0 domain.AccountResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context) domain.AccountResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(domain.AccountResponse)
	}
	return r0
}

// MockUserService_GetAccountAsAuthenticatedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountAsAuthenticatedUser'
type MockUserService_GetAccountAsAuthenticatedUser_Call struct {
	*mock.Call
}

// GetAccountAsAuthenticatedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserService_Expecter) GetAccountAsAuthenticatedUser(ctx interface{}) *MockUserService_GetAccountAsAuthenticatedUser_Call {
	return &MockUserService_GetAccountAsAuthenticatedUser_Call{Call: _e.mock.On("GetAccountAsAuthenticatedUser", ctx)}
}

func (_c *MockUserService_GetAccountAsAuthenticatedUser_Call) Run(run func(ctx context.Context)) *MockUserService_GetAccountAsAuthenticatedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_GetAccountAsAuthenticatedUser_Call) Return(accountResponse domain.AccountResponse) *MockUserService_GetAccountAsAuthenticatedUser_Call {
	_c.Call.Return(accountResponse)
	return _c
}

func (_c *MockUserService_GetAccountAsAuthenticatedUser_Call) RunAndReturn(run func(ctx context.Context) domain.AccountResponse) *MockUserService_GetAccountAsAuthenticatedUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountAsAuthenticatedUser provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateAccountAsAuthenticatedUser(ctx context.Context, request domain.UpdateAccount) domain.AccountResponse {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountAsAuthenticatedUser")
	}

	var r0 domain.AccountResponse
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateAccount) domain.AccountResponse); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.AccountResponse)
	}
	return r0
}

// MockUserService_UpdateAccountAsAuthenticatedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountAsAuthenticatedUser'
type MockUserService_UpdateAccountAsAuthenticatedUser_Call struct {
	*mock.Call
}

// UpdateAccountAsAuthenticatedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - request domain.UpdateAccount
func (_e *MockUserService_Expecter) UpdateAccountAsAuthenticatedUser(ctx interface{}, request interface{}) *MockUserService_UpdateAccountAsAuthenticatedUser_Call {
	return &MockUserService_UpdateAccountAsAuthenticatedUser_Call{Call: _e.mock.On("UpdateAccountAsAuthenticatedUser", ctx, request)}
}

func (_c *MockUserService_UpdateAccountAsAuthenticatedUser_Call) Run(run func(ctx context.Context, request domain.UpdateAccount)) *MockUserService_UpdateAccountAsAuthenticatedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateAccount
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateAccount)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_UpdateAccountAsAuthenticatedUser_Call) Return(accountResponse domain.AccountResponse) *MockUserService_UpdateAccountAsAuthenticatedUser_Call {
	_c.Call.Return(accountResponse)
	return _c
}

func (_c *MockUserService_UpdateAccountAsAuthenticatedUser_Call) RunAndReturn(run func(ctx context.Context, request domain.UpdateAccount) domain.AccountResponse) *MockUserService_UpdateAccountAsAuthenticatedUser_Call {
	_c.Call.Return(run)
	return _c
}
